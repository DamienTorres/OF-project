/*--------------------------------*- C++ -*----------------------------------*\
 =========                 |                                                  
 \      /  F ield         | OpenFOAM: The Open Source CFD Toolbox            
  \    /   O peration     | Website:  https://openfoam.org                   
   \  /    A nd           |  Version:  7                                     
    \/     M anipulation  |                                                  
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1; 
vertices
(
    (-0.200000 0.000000 -0.005000)
    (0.000000 0.000000 -0.005000)
    (0.300000 0.080385 -0.005000)
    (1.300000 0.080385 -0.005000)
    (2.300000 0.080385 -0.005000)
    (-0.200000 0.200000 -0.005000)
    (0.000000 0.200000 -0.005000)
    (0.300000 0.200000 -0.005000)
    (1.300000 0.200000 -0.005000)
    (2.300000 0.200000 -0.005000)
    (-0.200000 0.000000 0.005000)
    (0.000000 0.000000 0.005000)
    (0.300000 0.080385 0.005000)
    (1.300000 0.080385 0.005000)
    (2.300000 0.080385 0.005000)
    (-0.200000 0.200000 0.005000)
    (0.000000 0.200000 0.005000)
    (0.300000 0.200000 0.005000)
    (1.300000 0.200000 0.005000)
    (2.300000 0.200000 0.005000)
);

blocks
(
    hex (0 1 6 5 10 11 16 15) (40 40 1) simpleGrading (1 1 1)
    hex (1 2 7 6 11 12 17 16) (80 40 1) simpleGrading (1 1 1)
    hex (2 3 8 7 12 13 18 17) (80 40 1) simpleGrading (1 1 1)
    hex (3 4 9 8 13 14 19 18) (80 40 1) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 6 9 3)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (4 14 19 9)
        );
    }
    bottom
    {
        type symmetryPlane;
        faces
        (
            (0 1 7 6)
            (1 2 8 7)
            (2 3 13 8)
            (3 4 14 13)
        );
    }
    top
    {
        type symmetryPlane;
        faces
        (
            (3 9 10 4)
            (4 10 11 5)
            (5 11 15 10)
            (10 15 19 14)
        );
    }
    obstacle
    {
        type patch;
        faces
        (
            (1 2 8 7)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
